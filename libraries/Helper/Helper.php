<?php 	require "laravel".php;	function Fail($route,$message = ""){		if($route."" == "404"){			$message = T("TEMPLATE.PAGE_NOT_FOUND");		}		if(Auth::getUser()){			Message::error($message);			redirect("error");		}else{			redirect("login");		}		die;	}	function withModel($component = false){		if(!class_exists("ORM")){			IW::Lib("Controller");		}		ORM::getModel($component);	}	function getIP() {		//Just get the headers if we can or else use the SERVER global		if( $_SERVER['REMOTE_ADDR'] === "::1") return "::1";		if ( function_exists( 'apache_request_headers' ) ) {			$headers = apache_request_headers();		}else{			$headers = $_SERVER;		}		//Get the forwarded IP if it exists		if( array_key_exists( 'X-Forwarded-For', $headers ) && filter_var( $headers['X-Forwarded-For'], FILTER_VALIDATE_IP, FILTER_FLAG_IPV4 ) ) {			$the_ip = $headers['X-Forwarded-For'];		}elseif( array_key_exists( 'HTTP_X_FORWARDED_FOR', $headers ) && filter_var( $headers['HTTP_X_FORWARDED_FOR'], FILTER_VALIDATE_IP, FILTER_FLAG_IPV4 )		){			$the_ip = $headers['HTTP_X_FORWARDED_FOR'];		}else {			$the_ip = filter_var( $_SERVER['REMOTE_ADDR'], FILTER_VALIDATE_IP, FILTER_FLAG_IPV4 );		}		return $the_ip;	}		function toArray($data){		return json_decode(json_encode($data),true);	}	function View(){		app("VIEW.RAW",false);		return call_user_func_array("Controller::getView",func_get_args());	}		function action(){		return call_user_func_array("Controller::callAction",func_get_args());	}	function extract_attribute($attribute){		if(is_array($attribute)) {			$result = "";			foreach($attribute as $key=>$value){				$result .= " ".$key."=\"".$value."\"";			}			return $result;		}		if(is_string($attribute)){			return $attribute;		}	}	function TEXT($pkg , $text = ""){		if($text == ""){			echo $pkg;		}else{			echo $text;		}	}	/**	@input	pkg: string blongs to which package	text: constant text to translate	@return translate text depend on requested language	 **/	function T(){		$args = func_get_args();		$text = $args[0];		if(count($args) == 1) {			$result = Language::$instance->translate($text);			if ($result) return $result;			return $text;		}else{			$result = Language::$instance->translate($text);			$args[0] = $result;			if ($result) return  call_user_func_array("sprintf",$args);			return $text;		}	}	function P($text){		 echo T($text);	}	function route($path,$params = false){		if(is_array($params)){			$path = trim($path,"/");			foreach($params as $key=>$value){				if($value){					$path .= "/".$key.$value;				}			}		}		return config("IW.ROOT")."/".$path;	}	function redirect($route,$message = "",$type = "Notify"){		Message::set($message,$type);		header("location: ".route($route));		die;	}	function require_ob($path,$input = null){		ob_start();		if(is_array($input))			foreach($input as $key=>$value)				$$key = $value;		include $path;		$buffer = ob_get_contents();		@ob_end_clean();		return $buffer;	}	function require_ob_extract($path,$input = null){		ob_start();		if(is_array($input))			extract($input);		include $path;		$buffer = ob_get_contents();		@ob_end_clean();		return $buffer;	}	function config($key){		return Configuration::getInstance()->get($key);		}	function sys_dump(){		$args = func_get_args();		ob_start();		echo "<pre>";		var_dump($args);		echo "</pre>";		$result = ob_get_clean();		Template::getInstance()->addBlock("component",$result);	}	function text_dump(){		$args = func_get_args();		ob_start();		echo "<pre>";		var_dump($args);		echo "</pre>";		$result = ob_get_clean();		return $result;	}	function icon($icon,$color = ""){		return '<i class="fa fa-'.$icon.' '.$color.'"></i>';	}		function getJSON($path,$assoc = false){		$data = @file_get_contents($path);		return @json_decode($data,$assoc);	}